# Spring Boot application properties
spring.application.name=watana-backend
server.port=8080

# Spring Security - JWT Validation and Public Endpoints
# La propiedad 'spring.security.web.ignoring.ant-patterns' ha sido descontinuada en Spring Security 6
# Se recomienda usar HttpSecurity#authorizeHttpRequests().requestMatchers().permitAll() en SecurityConfig.java
# para configurar rutas públicas, lo cual ya estamos haciendo.


# CORS configuration (already handled in SecurityConfig.java, but keeping for reference)
# spring.web.cors.allowed-origins=http://localhost:3000
# spring.web.cors.allowed-methods=*
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=true

# Firebase Admin SDK configuration (no direct properties needed if GOOGLE_APPLICATION_CREDENTIALS env var is set)
# If you place serviceAccountKey.json in src/main/resources, you might need:
# firebase.service-account-key-path=classpath:serviceAccountKey.json
firebase.project-id=watana-app-c492d


# MQTT Broker Configuration
# Usa tu broker Mosquitto local
mqtt.broker.url=tcp://localhost:1883
mqtt.client.id=watana-backend-fixed-subscriber
mqtt.topic.inbound=watana/sensor/data
# mqtt.username=your_mqtt_username # Por defecto, Mosquitto local no requiere usuario/contraseña
# mqtt.password=your_mqtt_password # Por defecto, Mosquitto local no requiere usuario/contraseña

# =========================================
# Logging Configuration for MQTT Debugging
# =========================================
# Set logging level to DEBUG for Spring Integration MQTT components
logging.level.org.springframework.integration.mqtt=DEBUG
# Set logging level to DEBUG for the underlying Eclipse Paho MQTT client library
logging.level.org.eclipse.paho.client.mqttv3=DEBUG
# Set logging level to DEBUG for Spring Integration core
logging.level.org.springframework.integration=DEBUG

# =========================================
# Spring AI - Google AI Studio (API Key) via OpenAI Starter Configuration
# =========================================
# ¡IMPORTANTE! Reemplaza YOUR_GEMINI_API_KEY con tu clave de API real de Google AI Studio.
# Puedes obtener una clave aquí: https://aistudio.google.com/app/apikey
spring.ai.openai.api-key=AIzaSyBw8aCW9Gk3FnbjfzHxa3ym2KEZNG86h4I

# URL base de la API de Google Generative Language que imita el endpoint de OpenAI
spring.ai.openai.base-url=https://generativelanguage.googleapis.com/v1beta/openai

# Ruta específica para las completions de chat en la API de Google (compatible con OpenAI)
spring.ai.openai.chat.completions-path=/chat/completions

# Modelo Gemini a usar (asegúrate de que este modelo esté disponible en la API de Google AI Studio)
# 'gemini-1.5-flash-exp' o 'gemini-pro' son opciones comunes.
# Si tienes problemas, prueba 'gemini-pro' que suele ser más compatible.
spring.ai.openai.chat.options.model=gemini-1.5-flash # O gemini-pro, gemini-2.5-pro-preview-06-05, etc.
